368. Largest Divisible Subset
Solved
Medium
Topics
Companies
Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:

answer[i] % answer[j] == 0, or
answer[j] % answer[i] == 0
If there are multiple solutions, return any of them.

 

Example 1:

Input: nums = [1,2,3]
Output: [1,2]
Explanation: [1,3] is also accepted.
Example 2:

Input: nums = [1,2,4,8]
Output: [1,2,4,8]
 

Constraints:

1 <= nums.length <= 1000
1 <= nums[i] <= 2 * 109
All the integers in nums are unique.


/////////solution 

class Solution:
    def largestDivisibleSubset(self, nums: List[int]) -> List[int]:
        dp={}
        nums.sort()
        def dfs(i,prev_index):
            key=(i,prev_index)
            if key in dp:
                return dp[key]
            if i>=len(nums):
                return []

            not_add=dfs(i+1,prev_index)
            if prev_index == -1 or nums[i] % nums[prev_index] == 0:
                add =  [nums[i]]+dfs(i + 1, i)
                if len(add)>len(not_add):
                    ans=add
                else:
                    ans=not_add
                dp[key] =  ans
                return ans
            
            dp[key]=not_add
            return not_add
        return dfs(0,-1)